from pypylon import pylon
from pypylon import genicam

import sys
import os
import cv2
import numpy as np
from helpers_acquisition import simplifyImg, singleMovDetect

def detect_defects(param):
    img_ref = None
    found_img_ref = False
    img_counter = 0


    try:
        # Simply get the first available pylon device.
        first_device = pylon.TlFactory.GetInstance().CreateFirstDevice()
        camera = pylon.InstantCamera(first_device)
        camera.Open()

        # Optional if you set it in Pylon Viewer
        # TODO import features from config file generated by pylon viewer
        print("Loading camera configuration...")
        pylon.FeaturePersistence.Load(param['nodeFile'], camera.GetNodeMap(), True)
        # camera.PixelFormat = 'BayerRG8'

        camera.StartGrabbing(pylon.GrabStrategy_LatestImages)
        print("Camera start recording...")

        # Camera.StopGrabbing() is called automatically by the RetrieveResult() method
        # when c_countOfImagesToGrab images have been retrieved.
        while camera.IsGrabbing():
            # Wait for an image and then retrieve it. A timeout of 5000 ms is used.
            grabResult = camera.RetrieveResult(5000, pylon.TimeoutHandling_ThrowException)

            # Image grabbed successfully?
            if grabResult.GrabSucceeded():
                # Access the image data.
                # print("SizeX: ", grabResult.Width)
                # print("SizeY: ", grabResult.Height)
                # print("Gray value of first pixel: ", img[0, 0])

                #img = grabResult.Array
                img = cv2.cvtColor(grabResult.Array, cv2.COLOR_BAYER_RG2RGB)

                if not found_img_ref:
                    img_ref, _ = simplifyImg(img)
                    found_img_ref = True
                else:
                    bbox, mask = singleMovDetect(img, img_ref)

                    if bbox:
                        # Draw bbox
                        if param['draw_bbox']:
                            (x, y, w, h) = bbox
                            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)
                        # Save image
                        cv2.imwrite(os.path.join(param['path2save'], str(img_counter).zfill(4) + param['img_ext']), img)
                        img_counter += 1
            else:
                print("Error: ", grabResult.ErrorCode, grabResult.ErrorDescription)
            grabResult.Release()

    except genicam.GenericException as e:
        # Error handling.
        print("An exception occurred.")
        print(e.GetDescription())
        exitCode = 1

    sys.exit(exitCode)

if __name__ == '__main__':
    param = {'path2save': '/home/deepeye/Desktop',
             'img_ext': '.png',
             'draw_bbox': False,
             'nodeFile': 'config_camera.pfs'}

    detect_defects(param)

    # Test functions
    # frame = cv2.imread('/home/deepeye/Documents/Test_images/01.bmp', -1)
    #
    # gray, r = simplifyImg(frame)
    #
    # frame_2 = cv2.imread('/home/deepeye/Documents/Test_images/24.bmp', -1)
    #
    # bbox, thresh = singleMovDetect(frame_2, gray)
    #
    # (x, y, w, h) = bbox
    # cv2.rectangle(frame_2, (x, y), (x + w, y + h), (0, 255, 0), 2)
    #
    # cv2.imwrite('/home/deepeye/Documents/test.png', frame_2)
    # print(r)
